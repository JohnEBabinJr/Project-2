<div id='map'></div>

<script>


  mapboxgl.accessToken = 'pk.eyJ1IjoiZnh0emhvdSIsImEiOiJjazEwMTJncDgwMHp1M3BtdjkxZ3FicDY2In0.8rLpErDOJ5DGEOsiybn8Og';

  var map = new mapboxgl.Map({
    container: 'map', // Container ID
    style: 'mapbox://styles/mapbox/streets-v11', // Map style to use
    center: [-121.4942, 38.5778], // Starting position [lng, lat]
    zoom: 12, // Starting zoom level
  });



  map.on('load', function () {
    // Add a layer showing the places.

    $.ajax({
      url: "api/Jons",
      type: "GET"
    }).then(function (response) {
      console.log(response)

      for (var i = 0; i < response.length; i++) {

        var ok = {
          "type": "Feature",
          "properties": {
            "description": response[i].description,
            "icon": "theatre"
          },
          "geometry": {
            "type": "Point",
            "coordinates": [(response[i].long), (response[i].lat)]
          }
        }

        map.addLayer({
          "id": "places",
          "type": "symbol",
          "source": {
            "type": "geojson",
            "data": {
              "type": "FeatureCollection",
              "features": [

                ok

              ]
            }
          },
          "layout": {
            "icon-image": "{icon}-15",
            "icon-allow-overlap": true
          }
        })
        var marker = new mapboxgl.Marker() // Initialize a new marker
          .setLngLat([response[i].long, response[i].lat]) // Marker [lng, lat] coordinates
          .addTo(map); // Add the marker to the mapx
      }

    })
  });



  var popup = new mapboxgl.Popup({
    closeOnClick: true
  })
    .setLngLat([-121.4942, 38.5778])
    .setMaxWidth("200px")
    .setText("Our goal is to help everyone find a safe space to handle life's little emergencies. Use the map to find a bathroom near you.")
    .addTo(map);

  
      

    // When a click event occurs on a feature in the places layer, open a popup at the
    // location of the feature, with description HTML from its properties.
    map.on('click', 'places', function (e) {
      var coordinates = e.features[0].geometry.coordinates.slice();
      var description = e.features[0].properties.description;

      // Ensure that if the map is zoomed out such that multiple
      // copies of the feature are visible, the popup appears
      // over the copy being pointed to.
      while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
        coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
      }

      new mapboxgl.Popup()
        .setLngLat(coordinates)
        .setHTML(description)
        .addTo(map);
    });


    // Change the cursor to a pointer when the mouse is over the places layer.
    map.on('mouseenter', 'places', function () {
      map.getCanvas().style.cursor = 'pointer';
    });


  // Change it back to a pointer when it leaves.
  map.on('mouseleave', 'places', function () {
    map.getCanvas().style.cursor = '';
  });


  var marker = new mapboxgl.Marker() // Initialize a new marker
    .setLngLat([-121.4942, 38.5778]) // Marker [lng, lat] coordinates
    .addTo(map); // Add the marker to the map

  var geocoder = new MapboxGeocoder({ // Initialize the geocoder
    accessToken: mapboxgl.accessToken, // Set the access token
    mapboxgl: mapboxgl, // Set the mapbox-gl instance
    marker: true, // Do not use the default marker style
    placeholder: 'Search for bathrooms', // Placeholder text for the search bar
    // bbox: [-122.30937, 37.84214, -122.23715, 37.89838], // Boundary for Berkeley
    proximity: {
      longitude: -121.5059,
      latitude: 38.8500
    } // Coordinates of Sacramento
  });



  // Add the geocoder to the map
  map.addControl(geocoder);

  // After the map style has loaded on the page,
  // add a source layer and default styling for a single point
  map.on('load', function () {
    map.addSource('single-point', {
      type: 'geojson',
      data: {
        type: 'FeatureCollection',
        features: []
      }
    });

    geocoder.on('result', function (ev) {
      map.getSource('single-point').setData(ev.result.geometry);
    });
  });
</script>

{{!-- <div class="container-fluid bg bg-primary">
  <div class="row mt-4">
    {{#each Jon}}
    <div class="col col-4 p-3 shadow-sm">


      <h1 class="display-4">{{locationName}}</h1>
      <p class="lead">{{address}} </p>

      <hr class="my-4">

      <a class="btn btn-primary btn-lg" href="#" role="button">Learn more</a>

    </div>
    {{/each}}

  </div>
</div> --}}